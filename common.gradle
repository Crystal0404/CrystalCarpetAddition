apply plugin: 'maven-publish'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'fabric-loom'
apply plugin: 'com.replaymod.preprocess'
apply plugin: 'me.fallenbreath.yamlang'

int mcVersion = project.mcVersion

preprocess {
	tabIndentation = true
}

repositories {
	maven {
		url 'https://api.modrinth.com/maven'
	}
	maven {
		url 'https://maven.fallenbreath.me/releases'
	}
	maven {
		url 'https://jitpack.io'
	}
}

// https://github.com/FabricMC/fabric-loader/issues/783
configurations {
	modRuntimeOnly.exclude group: 'net.fabricmc', module: 'fabric-loader'
}

dependencies {
	// loom
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// dependencies
	include(modImplementation("me.fallenbreath:conditional-mixin-fabric:${project.conditionalmixin_version}"))
	modImplementation "com.github.gnembon:fabric-carpet:${project.carpet_versions}"

	final boolean enableFabricAPIInRuntime = false
	Set<String> apiModules = [
			"fabric-networking-api-v1"
	]
	apiModules.forEach {
		if (enableFabricAPIInRuntime) {
			modImplementation(fabricApi.module(it, project.fabric_api))
		} else {
			modCompileOnly(fabricApi.module(it, project.fabric_api))
		}
	}

	// MixinExtras
	include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${project.mixinextras_version}")))
}

String MIXIN_CONFIG_PATH = 'cca.mixins.json'
String LANG_DIR = 'assets/cca/lang'
JavaVersion JAVA_COMPATIBILITY
if (mcVersion >= 12005) {
	JAVA_COMPATIBILITY = JavaVersion.VERSION_21
} else if (mcVersion >= 11800) {
	JAVA_COMPATIBILITY = JavaVersion.VERSION_17
} else if (mcVersion >= 11700) {
	JAVA_COMPATIBILITY = JavaVersion.VERSION_16
} else {
	JAVA_COMPATIBILITY = JavaVersion.VERSION_1_8
}

JavaVersion MIXIN_COMPATIBILITY_LEVEL = JAVA_COMPATIBILITY
String LOADER_VERSION
switch (MIXIN_COMPATIBILITY_LEVEL) {
	case JavaVersion.VERSION_21:
		LOADER_VERSION = "0.15.10"
		break
	default:
		LOADER_VERSION = "0.14.25"
		break
}

loom {
	runConfigs.configureEach {
		// to make sure it generates all "Minecraft Client (:subproject_name)" applications
		ideConfigGenerated = true
		runDir '../../run'
		vmArgs '-Dmixin.debug.export=true'
		vmArgs '-Dcca.enable.debug=true'
	}
}

remapJar {
	remapperIsolation = true
}

String modVersionSuffix = ''
String artifactVersion = project.mod_version
// detect github action environment variables
// https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
if (System.getenv("BUILD_RELEASE") != "true") {
	String buildNumber = System.getenv("BUILD_ID")
	modVersionSuffix += buildNumber != null ? ('+build.' + buildNumber) : '-SNAPSHOT'
	artifactVersion += '-SNAPSHOT'  // A non-release artifact is always a SNAPSHOT artifact
}
String finalModVersion = project.mod_version + modVersionSuffix
String fullProjectVersion, fullArtifactVersion

// Example version values:
//   project.mod_version   1.0.3                      (the base mod version)
//   finalModVersion       1.0.3+build.88             (the actual mod version to use)
//   fullProjectVersion    mc1.15.2-v1.0.3+build.88   (in build output jar name)
//   fullArtifactVersion   mc1.15.2-v1.0.3-SNAPSHOT   (maven artifact version)

group = project.maven_group
if (System.getenv("JITPACK") == "true") {
	// move mc version into archivesBaseName, so jitpack will be able to organize archives from multiple subprojects correctly
	base.archivesName = project.archives_base_name + '-mc' + project.minecraft_version
	fullProjectVersion = 'v' + finalModVersion
	fullArtifactVersion = 'v' + artifactVersion
} else {
	base.archivesName = project.archives_base_name
	fullProjectVersion = 'mc' + project.minecraft_version + '-v' + finalModVersion
	fullArtifactVersion = 'mc' + project.minecraft_version + '-v' + artifactVersion
}
version = fullProjectVersion

// See https://youtrack.jetbrains.com/issue/IDEA-296490
// if IDEA complains about "Cannot resolve resource filtering of MatchingCopyAction" and you want to know why
processResources {
	inputs.property "id", project.mod_id
	inputs.property "name", project.mod_name
	inputs.property "version", finalModVersion
	inputs.property "minecraft_dependency", project.minecraft_dependency
	inputs.property "mixinextras_dependency", project.mixinextras_version
	inputs.property "conditional_mixin_dependency", project.conditionalmixin_version
	inputs.property "fabricloader_dependency", LOADER_VERSION

	filesMatching("fabric.mod.json") {
		def valueMap = [
				"id": project.mod_id,
				"name": project.mod_name,
				"version": finalModVersion,
				"minecraft_dependency": project.minecraft_dependency,
				"mixinextras_dependency": project.mixinextras_version,
				"conditional_mixin_dependency": project.conditionalmixin_version,
				"fabricloader_dependency": LOADER_VERSION
		]
		expand valueMap
	}

	filesMatching(MIXIN_CONFIG_PATH) {
		filter { s -> s.replace('{{COMPATIBILITY_LEVEL}}', "JAVA_${MIXIN_COMPATIBILITY_LEVEL.ordinal() + 1}") }
	}
}

// https://github.com/Fallen-Breath/yamlang
yamlang {
	targetSourceSets = [sourceSets.main]
	inputDir = LANG_DIR
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
	options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
	if (JAVA_COMPATIBILITY <= JavaVersion.VERSION_1_8) {
		// suppressed "source/target value 8 is obsolete and will be removed in a future release"
		options.compilerArgs << '-Xlint:-options'
	}
}

java {
	sourceCompatibility = JAVA_COMPATIBILITY
	targetCompatibility = JAVA_COMPATIBILITY

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from(rootProject.file('LICENSE')) {
		rename { "${it}_${project.archives_base_name}" }
	}
}

// https://github.com/hierynomus/license-gradle-plugin
license {
	// use "gradle licenseFormat" to apply license headers
	header = rootProject.file('HEADER.txt')
	include '**/*.java'
	skipExistingHeaders = true

	headerDefinitions {
		// ref: https://github.com/mathieucarbou/license-maven-plugin/blob/4c42374bb737378f5022a3a36849d5e23ac326ea/license-maven-plugin/src/main/java/com/mycila/maven/plugin/license/header/HeaderType.java#L48
		// modification: add a newline at the end
		SLASHSTAR_STYLE_NEWLINE {
			firstLine = "/*"
			beforeEachLine = " * "
			endLine = " */" + System.lineSeparator()
			afterEachLine = ""
			skipLinePattern = null
			firstLineDetectionPattern = "(\\s|\\t)*/\\*.*\$"
			lastLineDetectionPattern = ".*\\*/(\\s|\\t)*\$"
			allowBlankLines = false
			isMultiline = true
			padLines = false
		}
	}
	mapping {
		java = 'SLASHSTAR_STYLE_NEWLINE'
	}
	ext {
		name = project.mod_name
		author = 'Crystal0404'
		year = Calendar.getInstance().get(Calendar.YEAR).toString()
	}
}
classes.dependsOn licenseFormatMain
testClasses.dependsOn licenseFormatTest

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId base.archivesName.get()
			from components.java
			version = fullArtifactVersion
		}
	}

	// select the repositories you want to publish to
	repositories {
		// mavenLocal()

	}
}
